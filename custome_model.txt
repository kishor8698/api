class DoctorQualification(models.Model):
    id = models.AutoField(primary_key=True)
    qualification = models.CharField(max_length=250)

    def __str__(self):
        return self.qualification
role = (
    ('Dr','Dr'),
    ('Nurse','Nurse'),
    ('Admin','Admin'),
    ('Pharmist','Pharmist'),
    ('Receptionist','Receptionist'),
)
class DoctorsModel(AbstractBaseUser,PermissionsMixin):
    id = models.AutoField(primary_key=True)
    uid = models.UUIDField(unique=True, editable=False, default=uuid.uuid4, verbose_name='Public identifier')
    profile_img = models.ImageField(upload_to='profiles', default=None, blank=True)
    username = models.CharField(max_length=255,default=None,blank=True,null=True,unique=True)
    fullnm = models.CharField(max_length=250,null=True,default=None,blank=True)
    email = models.EmailField(default=None,blank=True,null=True,unique=True)
    age = models.PositiveIntegerField(default=None,blank=True,null=True)
    edu_quali = models.ManyToManyField(DoctorQualification)
    gender = models.CharField(max_length=100,choices=gender)
    role = models.CharField(max_length=100,choices=role,default=None,blank=True,null=True)
    is_active = models.BooleanField(default=True)
    is_deleted = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=True)
    department = models.ForeignKey(Department,on_delete=models.PROTECT,null=True,default=None,blank=True)
    mobile_no = models.CharField(max_length=10,default=None,blank=True,null=True)
    towncity = models.CharField(max_length=50,default=None,blank=True,null=True)
    address = models.TextField(default=None,blank=True,null=True)
    # password = models.CharField(max_length=150,default=None,blank=True,null=True)
    dateofjoin = models.DateField(auto_now_add=True)
    startduty = models.TimeField(default=None,blank=True,null=True)
    endduty = models.TimeField(default=None,blank=True,null=True)

    USERNAME_FIELD = 'username'
    # PASSWORD_FIELD = 'password'
    REQUIRED_FIELDS = ['email']

    objects = UserManager()

    class Meta:
        verbose_name = 'user'
        verbose_name_plural = 'users'
        db_table = u'hospital_doctorsmodel'

    def __str__(self):
        return str(self.fullnm)

    def get_qualification(self):
        return "/".join([str(p) for p in self.edu_quali.all()])

    @property
    def joiningdate(self):
        return self.dateofjoin.strftime('%d-%m-%Y')

class UserManager(BaseUserManager):
    def create_user(self, email, password, **extra_fields):
        if not email:
            raise ValueError("The email must be set")
        if not password:
            raise ValueError("The password must be set")
        email = self.normalize_email(email)

        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user
    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_active', True)
        extra_fields.setdefault('role', 'Admin')

        if extra_fields.get('role') != 'Admin':
            raise ValueError('Superuser must have role of Global Admin')
        return self.create_user(email, password, **extra_fields)


*
from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.contrib.auth.models import UserManager
*